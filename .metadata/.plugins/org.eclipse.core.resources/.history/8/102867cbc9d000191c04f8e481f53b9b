
import java.time.Year;
import java.util.*;
import java.util.function.Function;

import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.toList;
import org.junit.jupiter.api.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.awt.List;
import java.time.LocalDate;
import java.time.Month;

import org.hamcrest.CoreMatchers;


class BookshelfTest {

	@Test
	void Addtest() {
		BookShelf bookShelf = new BookShelf(3);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook2 = new Book("Java Book", "rakib",date );
		Boolean check = bookShelf.add(newBook2);
		assertEquals(check, true);
		
	}
	@Test
	void Addtest2() {
		BookShelf bookShelf = new BookShelf(1);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook2 = new Book("Java Book", "rakib",date );
		Book newBook3 = new Book("Java Book", "rakib",date );
		bookShelf.add(newBook2);
		Boolean check = bookShelf.add(newBook3);
		assertEquals(check, false);
		
	}
	@Test
	void Addtest3() {
		BookShelf bookShelf = new BookShelf(0);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("Java Book", "rakib",date );
		Boolean check = bookShelf.add(newBook3);
		assertEquals(check, false);
		
	}
	
	@Test
	void ArrangeTest1() {
		ArrayList<Book> bookTitle = new ArrayList<Book>();
		ArrayList<Book> bookTitle2 = new ArrayList<Book>();
	
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("Java Book", "rakib",date );
		bookTitle2.add(newBook3);
		Book newBook4 = new Book("Java Book", "rakib",date );
		bookShelf.add(newBook4);
		bookTitle =  (ArrayList<Book>) bookShelf.arrange();
		
		assertEquals(bookTitle.size(),bookTitle2.size());
		
		
		
	}
	
	@Test
	void ArrangeTest2() {
		ArrayList<Book> bookTitle = new ArrayList<Book>();
		ArrayList<Book> bookTitle2 = new ArrayList<Book>();
	
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("Java Book", "rakib",date );
		bookTitle2.add(newBook3);
		Book newBook4 = new Book("Java Book", "rakib",date );
		bookShelf.add(newBook4);
		bookTitle =  (ArrayList<Book>) bookShelf.arrange();
		
		assertEquals(bookTitle,bookTitle2);
		
		
		
	}
	
	
	@Test
	void ArrangeTest3() {
		ArrayList<Book> bookTitle = new ArrayList<Book>();
		ArrayList<Book> bookTitle2 = new ArrayList<Book>();
	
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("Java Book", "rakib",date );
		
		Book newBook5 = new Book("Java Book", "rakib",date );
	
		Book newBook6 = new Book("Java Book", "rakib",date );
		bookTitle2.add(newBook3);
		bookTitle2.add(newBook5);
		Book newBook4 = new Book("Java Book", "rakib",date );
		bookShelf.add(newBook4);
		bookShelf.add(newBook6);
		bookTitle =  (ArrayList<Book>) bookShelf.arrange();
		
		assertEquals(bookTitle,bookTitle2);
		
		
		
	}
	
	@Test
	void arrangeCompatorTest() {
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("zava Book", "zakib",date );
		Book newBook5 = new Book("Java Book", "rakib",date );
		bookList.add(newBook3);
		bookList.add(newBook5);
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		bookListReturn = (ArrayList<Book>) bookShelf.arrange(Comparator.naturalOrder());
		
		assertNotEquals(bookListReturn, bookList);
		
		
		
		
	}
	
	@Test
	void arrangeCompatorTest2() {
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("zava Book", "zakib",date );
		Book newBook5 = new Book("Java Book", "rakib",date );
		
		bookList.add(newBook5);
		bookList.add(newBook3);
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		bookListReturn = (ArrayList<Book>) bookShelf.arrange(Comparator.naturalOrder());
		
		assertEquals(bookListReturn, bookList);
		
		
		
		
	}
	
	
	@Test
	void arrangeCompatorTest3() {
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("zava Book", "zakib",date );
		Book newBook5 = new Book("Java Book", "rakib",date );
		
		bookList.add(newBook5);
		bookList.add(newBook3);
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		bookListReturn = (ArrayList<Book>) bookShelf.arrange(Comparator.naturalOrder());
		
		assertEquals(bookListReturn.size(), bookList.size());
			
	}
	
	@Test
	void arrangeCompatorTest4() {
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("zava Book", "zakib",date );
		Book newBook5 = new Book("Java Book", "rakib",date );
		
		bookList.add(newBook5);
		bookList.add(newBook3);
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		bookListReturn = (ArrayList<Book>) bookShelf.arrange(Comparator.naturalOrder());
		Book b1 = bookList.remove(0);
		Book b2 = bookListReturn.remove(0);
		assertEquals(b1, b2);
			
	}
	@Test
	void arrangeCompatorTest5() {
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook3 = new Book("zava Book", "zakib",date );
		Book newBook5 = new Book("Java Book", "rakib",date );
		bookList.add(newBook3);
		bookList.add(newBook5);
		
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		bookListReturn = (ArrayList<Book>) bookShelf.arrange(Comparator.naturalOrder());
		Book b1 = bookList.remove(0);
		Book b2 = bookListReturn.remove(0);
		assertNotEquals(b1, b2);
			
	}
	
	@Test
	void GroupByPublicationYearTest() {
		Map<Year, java.util.List<Book>> maps;
		Map<Year, java.util.List<Book>> actualMaps;
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 8);
		LocalDate date2 = LocalDate.of(1920, Month.MAY, 8);
		Book newBook3 = new Book("zava Book", "zakib",date );
		Book newBook5 = new Book("Java Book", "rakib",date2 );
		
		
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		maps =  bookShelf.groupByPublicationYear();
		
		assertEquals(maps.isEmpty(),false );
			
	}
	
	@Test
	void GroupByPublicationYearTest2() {
		Map<Year, java.util.List<Book>> maps;
		Map<Year, java.util.List<Book>> actualMaps;
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 8);
		LocalDate date2 = LocalDate.of(1920, Month.MAY, 8);
		Book newBook3 = new Book("zava Book", "zakib",date );
		Book newBook5 = new Book("Java Book", "rakib",date2 );
		
		
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		maps =  bookShelf.groupByPublicationYear();
		
		assertEquals(maps.size(),2 );
			
	}
	
	@Test
	void GroupByPublicationYearTest3() {
		Map<Year, java.util.List<Book>> maps;
		Map<Year, java.util.List<Book>> actualMaps;
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 8);
		LocalDate date2 = LocalDate.of(1920, Month.MAY, 8);
		Book newBook3 = new Book("zava Book", "zakib",date );
		Book newBook5 = new Book("Java Book", "rakib",date2 );
		
		
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		maps =  bookShelf.groupByPublicationYear();
		
		assertEquals(maps.size(),2 );
			
	}
	
	@Test
	void findBooksByTitleTest1() {
		
		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 8);
		LocalDate date2 = LocalDate.of(1920, Month.MAY, 8);
		Book newBook3 = new Book("zava", "zakib",date );
		Book newBook5 = new Book("java", "rakib",date2 );
		
		
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		bookListReturn = (ArrayList<Book>) bookShelf.findBooksByTitle("java");
		
		assertEquals(bookListReturn.size(),1 );
			
	}
	
	@Test
	void findBooksByTitleTest2() {

		ArrayList<Book> bookList = new ArrayList<Book>();
		ArrayList<Book> bookListReturn = new ArrayList<Book>();
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 8);
		LocalDate date2 = LocalDate.of(1920, Month.MAY, 8);
		Book newBook3 = new Book("zava", "zakib",date );
		Book newBook5 = new Book("java", "rakib",date2 );
		
		
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		bookListReturn = (ArrayList<Book>) bookShelf.findBooksByTitle("java");
		
		assertNotEquals(bookListReturn.size(),0 );
			
	}
	
	@Test
	void parcentageCompletedTest1() {

		ArrayList<Book> bookList = new ArrayList<Book>();
		
		BookShelf bookShelf = new BookShelf(2);
		LocalDate date = LocalDate.of(1900, Month.MAY, 8);
		LocalDate date2 = LocalDate.of(1920, Month.MAY, 8);
		Book newBook3 = new Book("zava", "zakib",date );
		
		
		
		bookShelf.add(newBook3);
		bookShelf.add(newBook5);
		
		int parcentage = bookShelf.parcentageCompleted();
		
		asserEquals(bookListReturn.size(),0 );
			
	}





}
