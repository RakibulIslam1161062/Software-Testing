import static org.junit.jupiter.api.Assertions.*;

import java.time.LocalDate;
import java.time.Month;

import org.junit.jupiter.api.Test;

class BookFilterTEsting {

	@Test
	void afterYearFilter1() {
		
		BookPublishedYearFilter bookPublishedYearFilter = new BookPublishedYearFilter();
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook2 = new Book("Java Book", "rakib",date );
		Boolean output = bookPublishedYearFilter.afterYearFilter(1901, newBook2);
		
		assertEquals(output, true);
		
	}
	
	@Test
	void afterYearFilter2() {
		
		BookPublishedYearFilter bookPublishedYearFilter = new BookPublishedYearFilter();
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook2 = new Book("Java Book", "rakib",date );
		Boolean output = bookPublishedYearFilter.afterYearFilter(1900, newBook2);
		
		assertEquals(output, false);
		
	}
	@Test
	void beforeYearFilter3() {
		
		BookPublishedYearFilter bookPublishedYearFilter = new BookPublishedYearFilter();
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook2 = new Book("Java Book", "rakib",date );
		Boolean output = bookPublishedYearFilter.beforeYearFilter(1901, newBook2);
		
		assertEquals(output, false);
		
	}
	
	@Test
	void afterYearFilter4() {
		
		BookPublishedYearFilter bookPublishedYearFilter = new BookPublishedYearFilter();
		LocalDate date = LocalDate.of(1900, Month.MAY, 7);
		Book newBook2 = new Book("Java Book", "rakib",date );
		Boolean output = bookPublishedYearFilter.beforeYearFilter(1899, newBook2);
		
		assertEquals(output, true);
		
	}

}
